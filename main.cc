#include "./src/battle.hh"

struct ArrayHash
{
    template <typename T, std::size_t N>
    std::size_t operator()(const std::array<T, N> &arr) const
    {
        std::size_t hash_value = 0;
        for (const auto &element : arr)
        {
            hash_value ^= std::hash<T>{}(element) + 0x9e3779b9 + (hash_value << 6) + (hash_value >> 2);
        }
        return hash_value;
    }
};

// print number of observed chance branches
void count_branches(
    const BattleTypes::State &state)
{
    const size_t tries = 1 << 15;
    BattleTypes::PRNG device{0};

    const size_t rows = state.row_actions.size();
    const size_t cols = state.col_actions.size();

    std::cout << rows << ' ' << cols << std::endl;

    typename BattleTypes::MatrixInt counts{rows, cols};

    for (int row_idx = 0; row_idx < rows; ++row_idx)
    {
        for (int col_idx = 0; col_idx < cols; ++col_idx)
        {
            const auto row_action = state.row_actions[row_idx];
            const auto col_action = state.col_actions[col_idx];

            std::unordered_map<std::array<uint8_t, 376>, int, ArrayHash> hash_map;

            for (int i = 0; i < tries; ++i)
            {
                auto state_ = state;
                state_.randomize_transition(device);
                state_.apply_actions(row_action, col_action);

                std::array<uint8_t, 376> fast;
                memcpy(fast.data(), state_.battle.bytes, 376);
                int &count = hash_map[fast];
                ++count;
            }

            counts.get(row_idx, col_idx) = hash_map.size();
        }
    }

    counts.print();
}

void play_good_game_lol(
    const BattleTypes::State &state_)
{
    using Types = TreeBandit<Exp3<MonteCarloModel<BattleTypes>>>;
    Types::PRNG device{0};
    std::cout << "play_good_game device seed: " << device.get_seed() << std::endl;
    Types::State state{state_};
    state.print_log = true;
    Types::Model model{0};
    Types::Search search{};
    int t = 0;
    while (!state.is_terminal())
    {
        std::cout << "t: " << t << std::endl;
        Types::MatrixNode root{};
        search.run_for_iterations(10000, device, state, model, root);
        Types::VectorReal r, c;
        search.get_empirical_strategies(root.stats, r, c);

        const int row_idx = device.sample_pdf(r);
        const int col_idx = device.sample_pdf(c);
        state.apply_actions(
            state.row_actions[row_idx],
            state.col_actions[col_idx]);
        // after to not overwrite .row_actions, col_actions
        state.get_actions();
        ++t;
    }
}

void map_test(
    BattleTypes::State &state)
{
    using Types = TreeBanditThreaded<Exp3<MonteCarloModel<BattleTypes>>>;
    Types::PRNG device{0};
    Types::Model model{0};
    Types::Search search{{.1}, 6};

    using AB = AlphaBeta<EmptyModel<MappedState<Types>>>;
    AB::State ab_state{
        1,
        300,
        1 << 8,
        device,
        state,
        model,
        search};

    std::cout << "TOTAL: " << ab_state.node->count_matrix_nodes() << std::endl;

    AB::Search ab_solver{};
    AB::Model ab_model{};
    AB::MatrixNode ab_root{};

    ab_solver.run(device, ab_state, ab_model, ab_root);
    std::cout << "SEARCHED: " << ab_root.count_matrix_nodes() << std::endl;

    AB::MatrixStats &stats = ab_root.stats;

    math::print(stats.row_solution);
    math::print(stats.row_solution);
    stats.data_matrix.print();
}

std::array<uint8_t, 384> x{57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 4, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 31, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 94, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 24, 95, 31, 101, 24, 153, 8, 2, 1, 3, 4, 5, 6, 95, 95, 3, 0, 0, 0, 1, 0, 2, 0, 117, 177, 67, 213, 168, 190, 149, 6};
std::vector<uint8_t> dl{1, 1, 64, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 65, 100, 57, 1, 57, 1, 0, 4, 9, 65, 100, 57, 1, 57, 1, 0, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 4, 10, 94, 100, 67, 1, 67, 1, 0, 4, 2, 94, 100, 67, 1, 67, 1, 0, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 94, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 24, 95, 32, 101, 24, 153, 8, 2, 1, 3, 4, 5, 6, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 94, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 24, 95, 32, 101, 24, 153, 8, 2, 1, 3, 4, 5, 6, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0, 213, 115, 9, 239, 232, 253, 100, 204, 80, 10, 10, 4, 1, 65, 100, 57, 1, 57, 1, 0, 3, 10, 95, 1, 0, 12, 1, 4, 2, 95, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 4, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 32, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 65, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 32, 86, 32, 94, 16, 105, 32, 1, 2, 3, 4, 5, 6, 0, 0, 57, 1, 198, 0, 188, 0, 82, 1, 112, 1, 69, 32, 86, 32, 94, 16, 105, 32, 57, 1, 0, 65, 204, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 85, 24, 95, 31, 101, 24, 153, 8, 67, 1, 0, 94, 55, 100, 191, 2, 108, 0, 108, 0, 198, 0, 52, 1, 58, 16, 68, 32, 85, 24, 135, 16, 191, 2, 0, 113, 0, 100, 67, 1, 248, 0, 12, 1, 72, 1, 42, 1, 57, 24, 85, 24, 86, 32, 105, 32, 67, 1, 0, 121, 201, 100, 97, 1, 42, 1, 32, 1, 62, 1, 238, 0, 34, 24, 59, 8, 63, 8, 89, 16, 97, 1, 0, 128, 0, 100, 11, 2, 62, 1, 228, 0, 158, 0, 228, 0, 34, 24, 89, 16, 115, 32, 156, 16, 11, 2, 0, 143, 0, 100, 67, 1, 228, 0, 218, 0, 62, 1, 102, 1, 94, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 24, 95, 31, 101, 24, 153, 8, 2, 1, 3, 4, 5, 6, 95, 95, 3, 0, 0, 0, 1, 0, 2, 0, 101, 239, 184, 100, 21, 41, 195, 135, 80, 10, 9};
int main(int argc, char **argv)
{

    BattleTypes::State state{};
    // state.debug_log = dl;
    state.apply_actions(
        state.row_actions[0], state.col_actions[0]);
    state.get_actions();
    BattleTypes::Seed seed;
    BattleTypes::PRNG device;

    // std::string path = "/home/user/Desktop/pkmn-pinyon-test/stream.txt";
    // remove(path.data());
    // std::fstream file;
    // file.open(path, std::ios::binary | std::ios::app);
    // const size_t n = state.debug_log.size();
    // file.write(reinterpret_cast<char *>(state.debug_log.data()), n);
    // file.close();

    map_test(state);
    // state.apply_actions(10, 10);
}
